{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zodiax","title":"Home"},{"location":"#zodiax","text":"","title":"Zodiax"},{"location":"base/base/","text":"Bases: ABC , Module An abstract base class that is used to give a user-friendly API for working with PyTrees, specifically using Equniox. This can be thought of as extending the equinox.Module class. If you are unfamiliar with PyTrees, check out this jax tutorial and have a look a the equinox docs to see how they can be extending to give object-oriented jax: - https://jax.readthedocs.io/en/latest/jax-101/05.1-pytrees.html - https://docs.kidger.site/equinox/ New concept: Union[str, list]s In order to make working with PyTrees easier, there is one concept that is introduced, the paths object. A path object is not a unique or new class of object type, just a helpfull way of thinking about navigating PyTrees. We define a 'path' here as string. Each path object refers to a unique 'leaf' in the PyTree. Each nested item should be joined with a dot ie '.', as if you were trying to access a class attribute. For the case of lists or tuples, you still access them with the 'dot' method. Here are some example path objects: path1 = 'object.param.value' path2 = 'p1.p2.p3' path3 = 'item.2.4.value' This functionality can be futher extended (as is done with many of the dLux classes) using the getattr method, allowing classes to access attributes using the . method, which also translates to paths. This class implements a series of concrete methods designed to match the jax.numpy.ndarray.at[]. methods ie: - pytree.get() - pytree.set() - pytree.add() - pytree.multiply() - pytree.divide() - pytree.power() - pytree.min() - pytree.max() - pytree.apply() - pytree.apply_args() add ( paths , values , pmap = None ) Add to the the leaves specified by paths with values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values Union [ Any , list ] The list of values to add to the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with values added to leaves specified by paths. apply ( paths , fns , pmap = None ) Applies the functions within fns the leaves specified by paths. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required fns Union [ list , Callable ] The list of functions to apply to the leaves. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with fns applied to the leaves specified by paths. apply_args ( paths , fns , args , pmap = None ) Applies the functions within fns the leaves specified by paths, while also passing in args to the function. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required fns Union [ list , Callable ] The list of functions to apply to the leaves. required args Union [ list , tuple ] The tupe or list of tuples of extra arguments to pass into fns. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with fns applied to the leaves specified by paths with the extra args passed in. divide ( paths , values , pmap = None ) Divides the the leaves specified by paths with values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values list The list of values to divide the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with values divided by leaves specified by paths. get ( paths , pmap = None ) Get the leaf specified by path. Parameters: Name Type Description Default paths Union [ str , list ] A list/tuple of nested paths to unwrap. required pmap dict A dictionary of paths. None Returns: Type Description leaf , leaves The leaf or list of leaves specified by paths. max ( paths , values , pmap = None ) Updates the leaves specified by paths with the maximum value of the leaves and values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values list The list of values to take the maximum of and the leaf. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with the leaves specified by paths updated with the maximum value of the leaf and values. min ( paths , values , pmap = None ) Updates the leaves specified by paths with the minimum value of the leaves and values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values list The list of values to take the minimum of and the leaf. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with the leaves specified by paths updated with the minimum value of the leaf and values. multiply ( paths , values , pmap = None ) Multiplies the the leaves specified by paths with values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values Union [ Any , list ] The list of values to multiply the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with values multiplied by leaves specified by paths. power ( paths , values , pmap = None ) Raises th leaves specified by paths to the power of values. Parameters: Name Type Description Default paths PAth A path or list of paths or list of nested paths. required values list The list of values to take the leaves specified by paths to the power of. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with the leaves specified by paths raised to the power of values. set ( paths , values , pmap = None ) Set the leaves specified by paths with values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values Union [ Any , list ] The list of values to set at the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with leaves specified by paths updated with values.","title":"Base"},{"location":"base/base/#zodiax.base.Base.add","text":"Add to the the leaves specified by paths with values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values Union [ Any , list ] The list of values to add to the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with values added to leaves specified by paths.","title":"add()"},{"location":"base/base/#zodiax.base.Base.apply","text":"Applies the functions within fns the leaves specified by paths. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required fns Union [ list , Callable ] The list of functions to apply to the leaves. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with fns applied to the leaves specified by paths.","title":"apply()"},{"location":"base/base/#zodiax.base.Base.apply_args","text":"Applies the functions within fns the leaves specified by paths, while also passing in args to the function. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required fns Union [ list , Callable ] The list of functions to apply to the leaves. required args Union [ list , tuple ] The tupe or list of tuples of extra arguments to pass into fns. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with fns applied to the leaves specified by paths with the extra args passed in.","title":"apply_args()"},{"location":"base/base/#zodiax.base.Base.divide","text":"Divides the the leaves specified by paths with values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values list The list of values to divide the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with values divided by leaves specified by paths.","title":"divide()"},{"location":"base/base/#zodiax.base.Base.get","text":"Get the leaf specified by path. Parameters: Name Type Description Default paths Union [ str , list ] A list/tuple of nested paths to unwrap. required pmap dict A dictionary of paths. None Returns: Type Description leaf , leaves The leaf or list of leaves specified by paths.","title":"get()"},{"location":"base/base/#zodiax.base.Base.max","text":"Updates the leaves specified by paths with the maximum value of the leaves and values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values list The list of values to take the maximum of and the leaf. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with the leaves specified by paths updated with the maximum value of the leaf and values.","title":"max()"},{"location":"base/base/#zodiax.base.Base.min","text":"Updates the leaves specified by paths with the minimum value of the leaves and values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values list The list of values to take the minimum of and the leaf. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with the leaves specified by paths updated with the minimum value of the leaf and values.","title":"min()"},{"location":"base/base/#zodiax.base.Base.multiply","text":"Multiplies the the leaves specified by paths with values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values Union [ Any , list ] The list of values to multiply the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with values multiplied by leaves specified by paths.","title":"multiply()"},{"location":"base/base/#zodiax.base.Base.power","text":"Raises th leaves specified by paths to the power of values. Parameters: Name Type Description Default paths PAth A path or list of paths or list of nested paths. required values list The list of values to take the leaves specified by paths to the power of. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with the leaves specified by paths raised to the power of values.","title":"power()"},{"location":"base/base/#zodiax.base.Base.set","text":"Set the leaves specified by paths with values. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required values Union [ Any , list ] The list of values to set at the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Name Type Description pytree Pytree The pytree with leaves specified by paths updated with values.","title":"set()"},{"location":"base/extended_base/","text":"Bases: Base This class extends the Base class, with the goal of giving access to a seris of functions designed to help interface with a series of jax-based optimisation packages such as optax and numpyro. apply_and_model ( model_fn , paths , fns , pmap = None , ** kwargs ) Applies the functions specified by fns to the leaves speficied by paths, and then calls the function specified by the string model_fn, returning whatever is returnd by the model_fn. Any extra positional arguments or keyword arguments are passed through to the modelling function. Parameters: Name Type Description Default model_fn str A string specifying which model function to call. required paths Union [ str , list ] A path or list of paths or list of nested paths. required fns Union [ Callable , list ] The list of functions to apply to the leaves. required pmap dict A dictionary of paths. None Returns: Type Description Whatever object is returned by model_fn. get_args ( paths , pmap = None ) Returns an 'args' object, to be used in conjunction with the Equinox filter functions. 'args' is a Pytree with a matching tree strucutre, but with boolean values at the leaves. This is primarily used by the Equinox.filter_grad() and Equinox.filter_value_and_grad() functions, passed in as the optional 'arg' argument. It is used to either turn on or off gradient calculations with respect to each leaf. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required pmap dict A dictionary of paths. None Returns: Name Type Description args Pytree An pytree of matching structre with boolean values at the leaves. get_optimiser ( paths , optimisers , get_args = False , pmap = None ) Returns an Optax.GradientTransformion object, with the optimisers specified by optimisers applied to the leaves specified by paths. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required optimisers Union [ optax . GradientTransformation , list ] A optax.GradientTransformation or list of optax.GradientTransformation objects to be applied to the leaves specified by paths. required get_args bool Return a corresponding args pytree or not. False pmap dict A dictionary of paths. None Returns: Type Description optimiser , state A tuple of (Optax.GradientTransformion, optax.MultiTransformState) objects, with the optimisers applied to the leaves specified by paths, and the initialised optimisation state. get_param_spec ( paths , groups , get_args = False , pmap = None ) Returns 'param_spec' object, to be used in conjunction with the Optax.multi_transform functions. The param_spec is a pytree of matching strucutre that has strings assigned to every node, denoting the group that is belongs to. Each of these groups can then have unique optimiser objects assigned to them. This is typically used to assign different learning rates to different parameters. Note this sets the default or non-trainable group to 'null'. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required groups Union [ str , list ] A string or list of strings, denoting which group to assign the corresponding leaves denoted by paths to. required get_args bool Return a corresponding args pytree or not. False pmap dict A dictionary of paths. None Returns: Name Type Description param_spec Pytree An pytree of matching structre with string values at the leaves specified by groups. update_and_model ( model_fn , paths , values , pmap = None , ** kwargs ) Updates the leaves speficied by paths with values, and then calls the function specified by the string model_fn, returning whatever is returnd by the model_fn. Any extra positional arguments or key-word arguments are passed through to the modelling function. This function is desigend to be used in conjunction with numpyro. Please go through the 'Pytree interface' tutorial to see how this is used. Parameters: Name Type Description Default model_fn str A string specifying which model function to call. required paths Union [ str , list ] A path or list of paths or list of nested paths. required values Union [ Any , list ] The list of values to set at the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Type Description Whatever object is returned by model_fn.","title":"ExtendedBase"},{"location":"base/extended_base/#zodiax.base.ExtendedBase.apply_and_model","text":"Applies the functions specified by fns to the leaves speficied by paths, and then calls the function specified by the string model_fn, returning whatever is returnd by the model_fn. Any extra positional arguments or keyword arguments are passed through to the modelling function. Parameters: Name Type Description Default model_fn str A string specifying which model function to call. required paths Union [ str , list ] A path or list of paths or list of nested paths. required fns Union [ Callable , list ] The list of functions to apply to the leaves. required pmap dict A dictionary of paths. None Returns: Type Description Whatever object is returned by model_fn.","title":"apply_and_model()"},{"location":"base/extended_base/#zodiax.base.ExtendedBase.get_args","text":"Returns an 'args' object, to be used in conjunction with the Equinox filter functions. 'args' is a Pytree with a matching tree strucutre, but with boolean values at the leaves. This is primarily used by the Equinox.filter_grad() and Equinox.filter_value_and_grad() functions, passed in as the optional 'arg' argument. It is used to either turn on or off gradient calculations with respect to each leaf. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required pmap dict A dictionary of paths. None Returns: Name Type Description args Pytree An pytree of matching structre with boolean values at the leaves.","title":"get_args()"},{"location":"base/extended_base/#zodiax.base.ExtendedBase.get_optimiser","text":"Returns an Optax.GradientTransformion object, with the optimisers specified by optimisers applied to the leaves specified by paths. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required optimisers Union [ optax . GradientTransformation , list ] A optax.GradientTransformation or list of optax.GradientTransformation objects to be applied to the leaves specified by paths. required get_args bool Return a corresponding args pytree or not. False pmap dict A dictionary of paths. None Returns: Type Description optimiser , state A tuple of (Optax.GradientTransformion, optax.MultiTransformState) objects, with the optimisers applied to the leaves specified by paths, and the initialised optimisation state.","title":"get_optimiser()"},{"location":"base/extended_base/#zodiax.base.ExtendedBase.get_param_spec","text":"Returns 'param_spec' object, to be used in conjunction with the Optax.multi_transform functions. The param_spec is a pytree of matching strucutre that has strings assigned to every node, denoting the group that is belongs to. Each of these groups can then have unique optimiser objects assigned to them. This is typically used to assign different learning rates to different parameters. Note this sets the default or non-trainable group to 'null'. Parameters: Name Type Description Default paths Union [ str , list ] A path or list of paths or list of nested paths. required groups Union [ str , list ] A string or list of strings, denoting which group to assign the corresponding leaves denoted by paths to. required get_args bool Return a corresponding args pytree or not. False pmap dict A dictionary of paths. None Returns: Name Type Description param_spec Pytree An pytree of matching structre with string values at the leaves specified by groups.","title":"get_param_spec()"},{"location":"base/extended_base/#zodiax.base.ExtendedBase.update_and_model","text":"Updates the leaves speficied by paths with values, and then calls the function specified by the string model_fn, returning whatever is returnd by the model_fn. Any extra positional arguments or key-word arguments are passed through to the modelling function. This function is desigend to be used in conjunction with numpyro. Please go through the 'Pytree interface' tutorial to see how this is used. Parameters: Name Type Description Default model_fn str A string specifying which model function to call. required paths Union [ str , list ] A path or list of paths or list of nested paths. required values Union [ Any , list ] The list of values to set at the leaves specified by paths. required pmap dict A dictionary of paths. None Returns: Type Description Whatever object is returned by model_fn.","title":"update_and_model()"}]}